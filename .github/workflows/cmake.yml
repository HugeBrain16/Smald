name: CMake

on:
  push:
    branches: [ test-CI ]
  pull_request:
    branches: [ test-CI ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  LINUX_TRIPLE: x86_64-pc-linux-gnu

jobs:
  build-linux:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build-linux -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_CXX_FLAGS="--target=${{env.LINUX_TRIPLE}}" -DCMAKE_CXX_COMPILER_TARGET=${{env.LINUX_TRIPLE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build-linux --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build-linux
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      
    - name: Dump Artifact
      uses: actions/upload-artifact@v2
      with:
        name: libsmald-x86_64-linux
        path: |
          ${{github.workspace}}/build-linux/src/libsmald.a
          ${{github.workspace}}/build-linux/apps/demo
          ${{github.workspace}}/include

  build-windows:
    runs-on: windows-latest
    
    steps:
      - uses: actions/checkout@v2
      - name: Configure CMake
        run: |
          cmake -B ${{github.workspace}}/build-windows-x86 -G "Visual Studio 16 2019" -A Win32 -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
          cmake -B ${{github.workspace}}/build-windows-x64 -G "Visual Studio 16 2019" -A x64 -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
          cmake -B ${{github.workspace}}/build-windows-arm -G "Visual Studio 16 2019" -A ARM -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
          cmake -B ${{github.workspace}}/build-windows-arm64 -G "Visual Studio 16 2019" -A ARM64 -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        
      - name: Build
        run: |
          cmake --build ${{github.workspace}}/build-windows-win32 --config ${{env.BUILD_TYPE}}
          cmake --build ${{github.workspace}}/build-windows-x64 --config ${{env.BUILD_TYPE}}
          cmake --build ${{github.workspace}}/build-windows-arm --config ${{env.BUILD_TYPE}}
          cmake --build ${{github.workspace}}/build-windows-arm64 --config ${{env.BUILD_TYPE}}
        
      - name: Test Win32
        shell: cmd
        run: |
          cd ${{github.workspace}}/build-windows-win32
          ctest -C ${{env.BUILD_TYPE}}
      
      - name: Test x64
        shell: cmd
        run: |
          cd ${{github.workspace}}/build-windows-x64
          ctest -C ${{env.BUILD_TYPE}}
      
      - name: Dump Artifact Win32
        uses: actions/upload-artifact@v2
        with:
          name: libsmald-win32-windows
          path: |
            ${{github.workspace}}/build-windows-win32/src/Release/smald.lib
            ${{github.workspace}}/build-windows-win32/apps/Release/demo.exe
            ${{github.workspace}}/include
      
      - name: Dump Artifact x64
        uses: actions/upload-artifact@v2
        with:
          name: libsmald-x64-windows
          path: |
            ${{github.workspace}}/build-windows-x64/src/Release/smald.lib
            ${{github.workspace}}/build-windows-x64/apps/Release/demo.exe
            ${{github.workspace}}/include

      - name: Dump Artifact ARM
        uses: actions/upload-artifact@v2
        with:
          name: libsmald-arm-windows
          path: |
            ${{github.workspace}}/build-windows-arm/src/Release/smald.lib
            ${{github.workspace}}/build-windows-arm/apps/Release/demo.exe
            ${{github.workspace}}/include

      - name: Dump Artifact ARM64
        uses: actions/upload-artifact@v2
        with:
          name: libsmald-arm64-windows
          path: |
            ${{github.workspace}}/build-windows-arm64/src/Release/smald.lib
            ${{github.workspace}}/build-windows-arm64/apps/Release/demo.exe
            ${{github.workspace}}/include
